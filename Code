Feature Selection 
=================

The features selected for this database come from the accelerometer and gyroscope 3-axial raw signals tAcc-XYZ and tGyro-XYZ. These time domain signals (prefix 't' to denote time) were captured at a constant rate of 50 Hz. Then they were filtered using a median filter and a 3rd order low pass Butterworth filter with a corner frequency of 20 Hz to remove noise. Similarly, the acceleration signal was then separated into body and gravity acceleration signals (tBodyAcc-XYZ and tGravityAcc-XYZ) using another low pass Butterworth filter with a corner frequency of 0.3 Hz. 

Subsequently, the body linear acceleration and angular velocity were derived in time to obtain Jerk signals (tBodyAccJerk-XYZ and tBodyGyroJerk-XYZ). Also the magnitude of these three-dimensional signals were calculated using the Euclidean norm (tBodyAccMag, tGravityAccMag, tBodyAccJerkMag, tBodyGyroMag, tBodyGyroJerkMag). 

Finally a Fast Fourier Transform (FFT) was applied to some of these signals producing fBodyAcc-XYZ, fBodyAccJerk-XYZ, fBodyGyro-XYZ, fBodyAccJerkMag, fBodyGyroMag, fBodyGyroJerkMag. (Note the 'f' to indicate frequency domain signals). 

These signals were used to estimate variables of the feature vector for each pattern:  
'-XYZ' is used to denote 3-axial signals in the X, Y and Z directions.

tBodyAcc-XYZ
tGravityAcc-XYZ
tBodyAccJerk-XYZ
tBodyGyro-XYZ
tBodyGyroJerk-XYZ
tBodyAccMag
tGravityAccMag
tBodyAccJerkMag
tBodyGyroMag
tBodyGyroJerkMag
fBodyAcc-XYZ
fBodyAccJerk-XYZ
fBodyGyro-XYZ
fBodyAccMag
fBodyAccJerkMag
fBodyGyroMag
fBodyGyroJerkMag

The set of variables that were estimated from these signals are: 

mean(): Mean value
std(): Standard deviation
mad(): Median absolute deviation 
max(): Largest value in array
min(): Smallest value in array
sma(): Signal magnitude area
energy(): Energy measure. Sum of the squares divided by the number of values. 
iqr(): Interquartile range 
entropy(): Signal entropy
arCoeff(): Autorregresion coefficients with Burg order equal to 4
correlation(): correlation coefficient between two signals
maxInds(): index of the frequency component with largest magnitude
meanFreq(): Weighted average of the frequency components to obtain a mean frequency
skewness(): skewness of the frequency domain signal 
kurtosis(): kurtosis of the frequency domain signal 
bandsEnergy(): Energy of a frequency interval within the 64 bins of the FFT of each window.
angle(): Angle between to vectors.

Additional vectors obtained by averaging the signals in a signal window sample. These are used on the angle() variable:

gravityMean
tBodyAccMean
tBodyAccJerkMean
tBodyGyroMean
tBodyGyroJerkMean

The complete list of variables of each feature vector is available in 'features.txt'


##1.Merges the training and the test sets to create one data set.
##Create a directory in which to store the downloaded and processed data
data.dir = path.expand("~/getdata-projectfiles-UCI HAR Dataset")
dir.create(data.dir, recursive=T)
setwd(data.dir)

##Download and extract the raw data
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zipfile = paste(data.dir, "UCI-HAR-Dataset.zip", sep="/")
download.file(url, zipfile)
unzip(zipfile)

library(dplyr)

##read test data
xtest = read.table("./UCI HAR Dataset/test/X_test.txt")
head(xtest)
summary(xtest)
str(xtest)
ytest = read.table("./UCI HAR Dataset/test/y_test.txt")
head(ytest)
str(ytest)
subjecttest = read.table("./UCI HAR Dataset/test/subject_test.txt")
head(subjecttest)
str(subjecttest)
table(subjecttest)

##check that the same number of observations exist.
nrow(xtest) == nrow(ytest)
nrow(xtest) == nrow(subjecttest)

##create a test data set
testset = xtest

##merge the subject column into the test data set
testset = mutate(testset, subject = as.integer(subjecttest$V1))
summary(testset)
str(testset$subject)
head(testset)

# Read the activity labels
activity.labels = read.table("./UCI HAR Dataset/activity_labels.txt")
activity.labels

##merge the activity label column into the test data set
test.activityf = factor(ytest$V1, levels=activity.labels$V1, labels=activity.labels$V2)

##common check
table(test.activityf)
table(ytest$V1)
testset = mutate(testset, activity = test.activityf)
summary(testset)

# Read in observed variables, activity, and subject for each observation
# Return a data frame with the combined data
read.dataset <- function(xfilename, yfilename, subjectfilename) {
  df = read.table(xfilename) # observed variables per observation
  y.df = read.table(yfilename) # activity label per observation
  subject.df = read.table(subjectfilename) # subject per observation
  	
  # add the subject column to the data set
  df = mutate(df, subject = subject.df$V1)
  	  
  # add the activity column to the data set
  df = mutate(df, activity = y.df$V1)
}

trainset =read.dataset("./UCI HAR Dataset/train/X_train.txt","./UCI HAR Dataset/train/y_train.txt","./UCI HAR Dataset/train/subject_train.txt")
str(trainset)
summary(trainset)
table(trainset$subject)

testset = read.dataset("./UCI HAR Dataset/test/X_test.txt","./UCI HAR Dataset/test/y_test.txt","./UCI HAR Dataset/test/subject_test.txt")
str(testset)
summary(testset)
table(testset$subject)
	
# merge the train and test sets into a single data set
data = rbind(testset, trainset)
summary(data)

##2.Extracts only the measurements on the mean and standard deviation for each measurement. 
##The file `features_info.txt` explains that for each measurement the mean and standard deviation
##was calculated (along with other statistics) and labeled with mean(), std(), or meanFreq().

## Read the feature labels
feature.labels = read.table("./UCI HAR Dataset/features.txt")
feature.labels = mutate(feature.labels, varname=paste0("V", V1))
feature.labels

##Select only feature labels that contain mean or std (case insensitive) AND are not angle measurements
filtered.feature.labels = filter(feature.labels, grepl('(mean|std)', V2, ignore.case=T) & !grepl('^angle\\(', V2))
filtered.feature.labels
vars = c(filtered.feature.labels$varname, c("subject", "activity"))
vars
data2 = select(data, one_of(vars))
names(data2)
summary(data2)

##3.Use descriptive activity names to name the activities in the data set

##Read the activity labels
activity.labels = read.table("./UCI HAR Dataset/activity_labels.txt")
activity.labels

##transform the activity column into a factor
activityf = factor(data2$activity, levels=activity.labels$V1, labels=activity.labels$V2)
str(activityf)
summary(activityf)
##add the activity column to the data set
data3 = mutate(data2, activity = activityf)
summary(data3)
	
##4.Appropriately label the data set with descriptive variable names.

##Replace the default variable names for the observed variables, e.g. "V1" and "V2", with the
## descriptive names from features.txt, e.g. "tBodyAcc-mean()-X" and "tBodyAcc-mean()-Y".
library(data.table)
oldnames = filtered.feature.labels$varname
oldnames
newnames = as.character(filtered.feature.labels$V2)
newnames
setnames(data3, old=oldnames, new=newnames)
names(data3)

# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.

library(reshape2)
## group by subject and activity
data.melt = melt(data3, id=c("subject", "activity"), measure.vars=newnames)
head(data.melt)
## take mean of each variable within each group


mean.data = dcast(data.melt, subject + activity ~ variable, mean)

##transform the variable names to reflect that they are now the mean of measurements for
## each subject and activity
oldnames = names(mean.data)[3:length(names(mean.data))]
oldnames
newnames = as.character(sapply(oldnames, function(n) paste0("subject-activity-mean-", n)))
newnames
setnames(mean.data, old=oldnames, new=newnames)

head(mean.data, n=18)

##Write the mean across time windows of each variable within each subject-activity group to a file.
write.table(mean.data, file="HAR-subject-activity-mean.txt", row.name=FALSE)
## Example of how to read the table
df = read.table("HAR-subject-activity-mean.txt", header=TRUE)
dim(df)
head(df)
names(df)
for(name in names(mean.data)) { print(name) }
